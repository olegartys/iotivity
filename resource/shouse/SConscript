Import('env')

# Create and setup SHouse own environment 

lib_env = env.Clone()
SConscript('#build_common/thread.scons', exports = {'thread_env' : lib_env})

# Add third party libraries
SConscript('#resource/third_party_libs.scons', 'lib_env')

shouse_env = lib_env.Clone()

# FIXME: on secure build examples fail (https://jira.iotivity.org/browse/IOT-2431)
if shouse_env.get('SECURED') != '0':
	print("For SHouse build SECURED should be set to 0!")
	Exit(-1)

compiler = shouse_env.get('CXX')
target_os = shouse_env.get('TARGET_OS')

if 'g++' in compiler:
    shouse_env.AppendUnique(CXXFLAGS = ['-std=c++11'])

if target_os in ['msys_nt', 'windows']:
    shouse_env.PrependUnique(LIBS = ['mswsock', 'ws2_32', 'iphlpapi', 'ole32'])
else:
    shouse_env.PrependUnique(LIBS = ['oc_logger'])

if shouse_env.get('SECURED') == '1':
    shouse_env.AppendUnique(LIBS = ['mbedtls', 'mbedx509','mbedcrypto'])
    if target_os in ['msys_nt', 'windows']:
        shouse_env.AppendUnique(LIBS = ['advapi32'])

if target_os == 'android':
    shouse_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
    shouse_env.AppendUnique(LIBS = ['gnustl_shared'])

    if not shouse_env.get('RELEASE'):
        shouse_env.AppendUnique(LIBS = ['log'])

if target_os in ['msys_nt', 'windows']:
    shouse_env.AppendUnique(LIBS = ['Comctl32', 'Gdi32', 'User32'])

Export('shouse_env')


# SHouse SDK
SConscript('#resource/shouse/sdk/SConscript')

# SHouse applications
SConscript('#resource/shouse/apps/SConscript')
